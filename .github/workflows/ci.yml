name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ "master", "develop" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "master" ]

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==============================================================================
  # 🧪 Test & Security Analysis
  # ==============================================================================
  test:
    name: 🧪 Test & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 📦 Install dependencies
        run: make deps

      - name: 🛠️ Install development tools
        run: make tools

      - name: 🕵️ Run linter
        run: make lint

      - name: 🧪 Run tests with coverage
        run: |
          make test
          make coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: 🏗️ Build for CodeQL analysis
        run: make build

      - name: 🔬 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🛡️ Run Gosec Security Scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -no-fail -fmt sarif -out results.sarif ./...

      - name: 📤 Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # ==============================================================================
  # 🏗️ Build Binaries
  # ==============================================================================
  build:
    name: 🏗️ Build Binaries
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🏗️ Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p build
          if [ "$GOOS" = "windows" ]; then
            go build -ldflags="-s -w" -o build/deadlinkr-${{ matrix.goos }}-${{ matrix.goarch }}.exe .
          else
            go build -ldflags="-s -w" -o build/deadlinkr-${{ matrix.goos }}-${{ matrix.goarch }} .
          fi

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deadlinkr-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/
          retention-days: 7

  # ==============================================================================
  # 🐳 Build & Push Docker Images
  # ==============================================================================
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            deadlinkr/deadlinkr
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔑 Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔑 Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ==============================================================================
  # 📦 Release (only on tags)
  # ==============================================================================
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📂 Organize artifacts
        run: |
          mkdir -p ./build
          find ./artifacts -name "deadlinkr-*" -exec cp {} ./build/ \;
          ls -la ./build/

      - name: 🏷️ Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            VERSION=${GITHUB_REF#refs/tags/}
            sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | head -n -1 > release-notes.md
          else
            echo "## Changes" > release-notes.md
            echo "See commit history for details." >> release-notes.md
          fi

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          files: |
            ./build/deadlinkr-*
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==============================================================================
  # 🧹 Cleanup
  # ==============================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    
    steps:
      - name: 🗑️ Delete old artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            deadlinkr-linux-amd64
            deadlinkr-linux-arm64
            deadlinkr-darwin-amd64
            deadlinkr-darwin-arm64
            deadlinkr-windows-amd64